rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() { 
        return request.auth != null;
    }
    
    function isMe(userId) { 
        return isAuthenticated() && (userId == request.auth.uid)
    }
    
    function isUserValid(user) {
        return user.keys().hasOnly(['name', 'avatarUrl', 'selfIntroduction', 'createdAt', 'updatedAt'])
         && user.keys().hasAll(['name', 'createdAt', 'updatedAt'])
         && user.get('avatarUrl', '') is string
         && user.get('selfIntroduction', '') is string;
    }

    match /users/{userId} {
      allow get: if isMe(userId)

      allow update: if isMe(userId)
      && isUserValid(request.resource.data)

      allow list: if isAuthenticated()
    }

    function isCreatedChatValid(chat) {
      return chat.keys().hasOnly(
        ['createdAt', 'updatedAt', 'name', 'memberIds', 'createdBy']
      )
      && chat.keys().hasAll(
        ['memberIds', 'createdBy', 'createdAt', 'updatedAt']
      )
      && chat.get('name', '') is string
      && chat.memberIds is list
      && chat.createdAt is timestamp
      && chat.updatedAt is timestamp
      && chat.createdBy is string
    }

    function isUpdatedChatValid(chat) {
      return 'updatedAt' in chat
      && chat.updatedAt is timestamp
    }

    match /chats/{chatId} {
      allow create: if isAuthenticated()
      && isCreatedChatValid(request.resource.data)

      allow read: if isAuthenticated()

      allow update: if isUpdatedChatValid(request.resource.data)

      allow delete: if isAuthenticated() && request.auth.uid == resource.data.createdBy
      
      match /messages/{messageId} {
        allow create, update: if isAuthenticated() 
        && request.resource.data.author.id == request.auth.uid

        allow delete: if isAuthenticated() && resource.data.author.id == request.auth.uid

        allow list: if isAuthenticated()
      }
    }
  }
}